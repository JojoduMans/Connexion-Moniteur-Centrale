#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Application Streamlit pour le Guide de Diagnostic R√©seau CI
"""

import streamlit as st
import json
from datetime import datetime
from diagnostic_ci import GuideDiagnosticCI

# Configuration de la page
st.set_page_config(
    page_title="Diagnostic R√©seau CI",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .stAlert > div {
        padding: 1rem;
        border-radius: 0.5rem;
    }
    .success-box {
        background-color: #d4edda;
        border-left: 5px solid #28a745;
        padding: 1rem;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border-left: 5px solid #ffc107;
        padding: 1rem;
        margin: 1rem 0;
    }
    .error-box {
        background-color: #f8d7da;
        border-left: 5px solid #dc3545;
        padding: 1rem;
        margin: 1rem 0;
    }
    .info-box {
        background-color: #d1ecf1;
        border-left: 5px solid #17a2b8;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def initialiser_session():
    """Initialise les variables de session."""
    if 'diagnostic' not in st.session_state:
        st.session_state.diagnostic = GuideDiagnosticCI()
    if 'etape_actuelle' not in st.session_state:
        st.session_state.etape_actuelle = 0
    if 'donnees_collectees' not in st.session_state:
        st.session_state.donnees_collectees = {}

def afficher_entete():
    """Affiche l'en-t√™te de l'application."""
    st.title("üîß Guide de Diagnostic R√©seau - Centrale d'Interphonie (CI)")
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Port CI", "24005", "TCP")
    with col2:
        st.metric("√âtape actuelle", f"{st.session_state.etape_actuelle}/9")
    with col3:
        st.metric("Donn√©es collect√©es", len(st.session_state.donnees_collectees))
    
    st.markdown("---")
    
    # Avertissement important
    st.warning("‚ö†Ô∏è **LIMITATION IMPORTANTE** : Les moniteurs ne permettent PAS l'ex√©cution de commandes r√©seau. Toutes les commandes sont √† ex√©cuter depuis la **centrale de surveillance**.")

def afficher_sidebar():
    """Affiche la barre lat√©rale avec navigation."""
    with st.sidebar:
        st.header("üìã Navigation")
        
        etapes = [
            "0Ô∏è‚É£ Configuration Initiale",
            "1Ô∏è‚É£ D√©couverte LLDP",
            "2Ô∏è‚É£ Couche Physique",
            "3Ô∏è‚É£ Couche IP",
            "4Ô∏è‚É£ Connectivit√©",
            "5Ô∏è‚É£ Port CI (24005)",
            "6Ô∏è‚É£ Couche Applicative",
            "7Ô∏è‚É£ Trafic Multicast",
            "8Ô∏è‚É£ QoS et Priorisation"
        ]
        
        etape_selectionnee = st.radio(
            "S√©lectionner une √©tape",
            range(len(etapes)),
            format_func=lambda x: etapes[x],
            key='etape_navigation'
        )
        
        st.session_state.etape_actuelle = etape_selectionnee
        
        st.markdown("---")
        
        # R√©sum√© des donn√©es collect√©es
        if st.session_state.donnees_collectees:
            st.subheader("üìä Donn√©es collect√©es")
            for cle, valeur in st.session_state.donnees_collectees.items():
                st.text(f"{cle}: {valeur}")
        
        st.markdown("---")
        
        # Boutons d'action
        if st.button("üîÑ R√©initialiser", use_container_width=True):
            st.session_state.clear()
            st.rerun()
        
        if st.button("üíæ Exporter rapport", use_container_width=True):
            exporter_rapport()

def etape_configuration_initiale():
    """√âtape 0: Configuration initiale."""
    st.header("0Ô∏è‚É£ Configuration Initiale du Moniteur")
    
    st.info("Cette √©tape v√©rifie la configuration de base du moniteur avant le diagnostic r√©seau.")
    
    with st.expander("üìã Informations sur cette √©tape", expanded=True):
        st.markdown("""
        **Points v√©rifi√©s :**
        - Configuration du label ou port mapping
        - Assignation dans la centrale
        - Activation des fonctionnalit√©s
        """)
    
    # Question 1: Label/Port mapping
    col1, col2 = st.columns(2)
    with col1:
        label_config = st.radio(
            "Avez-vous configur√© un label sur le moniteur ou utilisez-vous le port mapping ?",
            ["Oui", "Non"],
            key="q_label_config"
        )
    
    if label_config == "Non":
        st.error("‚ö†Ô∏è **ACTION REQUISE:** Configuration du label n√©cessaire")
        with st.expander("üìù D√©tails de la correction"):
            st.markdown("""
            1. Configurer un label unique sur le moniteur
            2. OU activer le port mapping automatique
            3. V√©rifier que le label ne conflit pas avec un autre √©quipement
            """)
        
        with col2:
            auto_mapping = st.radio(
                "Le port mapping automatique est-il activ√© sur la centrale ?",
                ["Oui", "Non"],
                key="q_auto_mapping"
            )
        
        if auto_mapping == "Non":
            st.error("Configuration n√©cessaire c√¥t√© centrale pour la d√©couverte automatique")
    
    # Question 2: Assignation
    assignation = st.radio(
        "Le moniteur est-il correctement assign√©/d√©clar√© dans l'application centrale ?",
        ["Oui", "Non"],
        key="q_assignation"
    )
    
    if assignation == "Non":
        st.error("‚ö†Ô∏è **ACTION REQUISE:** Assignation du moniteur dans la centrale")
        with st.expander("üìù D√©tails de la correction"):
            st.markdown("""
            1. Ajouter le moniteur dans l'interface de gestion
            2. Associer le bon label/adresse au moniteur
            3. V√©rifier les droits/autorisations du moniteur
            4. Sauvegarder et appliquer la configuration
            """)
        
        statut = st.radio(
            "Le moniteur appara√Æt-il comme 'En ligne' dans l'interface de la centrale ?",
            ["Oui", "Non"],
            key="q_statut_interface"
        )
    
    # Question 3: Fonctionnalit√©s
    fonctionnalites = st.radio(
        "Toutes les fonctionnalit√©s du moniteur sont-elles activ√©es (appel, diffusion, etc.) ?",
        ["Oui", "Non"],
        key="q_fonctionnalites"
    )
    
    if fonctionnalites == "Non":
        st.warning("V√©rifier la configuration des fonctionnalit√©s - Activer les services n√©cessaires")
    
    # Navigation
    if st.button("‚û°Ô∏è √âtape suivante : D√©couverte LLDP", use_container_width=True):
        st.session_state.etape_actuelle = 1
        st.rerun()

def etape_lldp():
    """√âtape 1: D√©couverte LLDP."""
    st.header("1Ô∏è‚É£ D√©couverte LLDP - Topologie R√©seau")
    
    st.info("LLDP permet d'identifier la topologie r√©seau et la configuration du port switch.")
    
    with st.expander("üîç Commandes LLDP utiles", expanded=False):
        st.code("""
# V√©rifier LLDP sur le switch
show lldp neighbors
show lldp neighbors detail

# Activer LLDP (Cisco)
lldp run

# Informations du port
show lldp interface <interface>
        """, language="bash")
    
    # Question LLDP activ√©
    lldp_active = st.radio(
        "LLDP est-il activ√© sur le switch connect√© au moniteur ?",
        ["Oui", "Non"],
        key="q_lldp_active"
    )
    
    if lldp_active == "Non":
        st.warning("‚ö†Ô∏è Activer LLDP sur le switch : `lldp run`")
    else:
        # Moniteur visible
        lldp_visible = st.radio(
            "Le moniteur est-il visible dans 'show lldp neighbors' sur le switch ?",
            ["Oui", "Non"],
            key="q_lldp_visible"
        )
        
        if lldp_visible == "Non":
            st.error("‚ö†Ô∏è Moniteur non d√©couvert par LLDP")
            with st.expander("üìù Actions correctives"):
                st.markdown("""
                1. V√©rifier que LLDP est activ√© sur le moniteur
                2. Contr√¥ler la connectivit√© physique
                3. Attendre la synchronisation LLDP (30s-2min)
                4. V√©rifier avec: `show lldp neighbors detail`
                """)
        else:
            # Collecte d'informations LLDP
            st.subheader("üìã Informations LLDP collect√©es")
            
            col1, col2 = st.columns(2)
            with col1:
                device_name = st.text_input("Nom/Hostname du moniteur", key="lldp_device")
                port_switch = st.text_input("Port switch connect√© (ex: Gi0/1)", key="lldp_port")
            
            with col2:
                vlan_natif = st.text_input("VLAN natif du port", key="lldp_vlan")
                capabilities = st.text_input("Capabilities LLDP", key="lldp_cap")
            
            if device_name:
                st.session_state.donnees_collectees['LLDP Device'] = device_name
            if port_switch:
                st.session_state.donnees_collectees['Port Switch'] = port_switch
            if vlan_natif:
                st.session_state.donnees_collectees['VLAN'] = vlan_natif
    
    # Navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente", use_container_width=True):
            st.session_state.etape_actuelle = 0
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è √âtape suivante : Couche Physique", use_container_width=True):
            st.session_state.etape_actuelle = 2
            st.rerun()

def etape_physique():
    """√âtape 2: Couche Physique."""
    st.header("2Ô∏è‚É£ Couche Physique - Connectivit√© de base")
    
    with st.expander("üîç Commandes de v√©rification", expanded=False):
        st.code("""
# √âtat de l'interface
show interface <interface> status
show interface <interface>

# Erreurs d'interface
show interface <interface> | include error

# Nettoyer les compteurs
clear counters <interface>
        """, language="bash")
    
    # Question Link
    link_up = st.radio(
        "Le moniteur est-il aliment√© et le voyant Link est-il vert/actif ?",
        ["Oui", "Non"],
        key="q_link_up"
    )
    
    if link_up == "Non":
        st.error("‚ö†Ô∏è **PROBL√àME PHYSIQUE D√âTECT√â**")
        with st.expander("üìù Actions correctives urgentes"):
            st.markdown("""
            1. Tester un autre c√¢ble r√©seau
            2. Changer de port sur le switch
            3. V√©rifier l'alimentation du moniteur
            4. Contr√¥ler les LEDs du switch
            5. V√©rifier les informations LLDP si disponibles
            """)
    else:
        # Erreurs d'interface
        erreurs = st.radio(
            "Le device status du port switch indique-t-il des erreurs ?",
            ["Oui", "Non"],
            key="q_erreurs_interface"
        )
        
        if erreurs == "Oui":
            st.warning("Analyser les erreurs d'interface (CRC, collisions, runts)")
        
        # Vitesse du lien
        vitesse = st.radio(
            "Le link est-il √† la bonne vitesse (100M/1G) ?",
            ["Oui", "Non"],
            key="q_vitesse"
        )
        
        if vitesse == "Non":
            st.warning("Probl√®me de n√©gociation de vitesse - Forcer speed/duplex si n√©cessaire")
    
    # Navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente", use_container_width=True):
            st.session_state.etape_actuelle = 1
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è √âtape suivante : Couche IP", use_container_width=True):
            st.session_state.etape_actuelle = 3
            st.rerun()

def etape_ip():
    """√âtape 3: Couche IP."""
    st.header("3Ô∏è‚É£ Couche R√©seau (IP) - Configuration r√©seau")
    
    with st.expander("üîç Commandes r√©seau", expanded=False):
        st.code("""
# DHCP
show ip dhcp binding
show ip dhcp lease

# ARP
show ip arp
arp -a

# Routing
show ip route
        """, language="bash")
    
    # Collecte IP moniteur
    st.subheader("üìã Informations r√©seau du moniteur")
    col1, col2 = st.columns(2)
    
    with col1:
        ip_moniteur = st.text_input("Adresse IP du moniteur", key="ip_moniteur")
        subnet = st.text_input("Sous-r√©seau (ex: 192.168.1.0/24)", key="subnet")
    
    with col2:
        gateway = st.text_input("Passerelle par d√©faut", key="gateway")
    
    if ip_moniteur:
        st.session_state.donnees_collectees['IP Moniteur'] = ip_moniteur
    if gateway:
        st.session_state.donnees_collectees['Gateway'] = gateway
    
    # Question IP valide
    ip_valide = st.radio(
        "Le moniteur a-t-il une adresse IP valide (pas 169.254.x.x) ?",
        ["Oui", "Non"],
        key="q_ip_valide"
    )
    
    if ip_valide == "Non":
        st.error("‚ö†Ô∏è **PROBL√àME D'ATTRIBUTION IP**")
        with st.expander("üìù Actions correctives"):
            st.markdown("""
            1. V√©rifier le serveur DHCP: `show ip dhcp binding`
            2. Contr√¥ler la configuration IP statique du moniteur
            3. V√©rifier les VLANs: `show vlan brief`
            4. Tester depuis un autre device sur le m√™me segment
            """)
    else:
        # Test passerelle
        ping_gw = st.radio(
            "Le moniteur peut-il pinger sa passerelle par d√©faut ?",
            ["Oui", "Non"],
            key="q_ping_gw"
        )
        
        if ping_gw == "Non":
            st.error("‚ö†Ô∏è **PROBL√àME DE PASSERELLE**")
            with st.expander("üìù Diagnostic passerelle"):
                st.markdown("""
                1. V√©rifier la table de routage: `show ip route`
                2. Contr√¥ler les VLANs: `show vlan id <vlan>`
                3. Tester depuis un autre √©quipement du m√™me VLAN
                4. V√©rifier l'interface SVI: `show ip interface vlan<X>`
                """)
    
    # Navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente", use_container_width=True):
            st.session_state.etape_actuelle = 2
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è √âtape suivante : Connectivit√©", use_container_width=True):
            st.session_state.etape_actuelle = 4
            st.rerun()

def etape_connectivite():
    """√âtape 4: Connectivit√©."""
    st.header("4Ô∏è‚É£ Connectivit√© Moniteur ‚Üî Centrale")
    
    # Collecte IP centrale
    ip_centrale = st.text_input("Adresse IP de la centrale CI", key="ip_centrale")
    if ip_centrale:
        st.session_state.donnees_collectees['IP Centrale'] = ip_centrale
    
    with st.expander("üîç Tests de connectivit√©", expanded=False):
        if ip_centrale:
            st.code(f"""
# Test ping
ping {ip_centrale}
ping {ip_centrale} -t

# Traceroute
tracert {ip_centrale}

# Test MTU
ping {ip_centrale} -f -l 1472
            """, language="bash")
    
    # Question ping centrale
    ping_centrale = st.radio(
        "Le moniteur peut-il pinger l'IP de la centrale ?",
        ["Oui", "Non"],
        key="q_ping_centrale"
    )
    
    if ping_centrale == "Non":
        st.error("‚ö†Ô∏è **PROBL√àME DE CONNECTIVIT√â**")
        with st.expander("üìù Diagnostic approfondi"):
            st.markdown(f"""
            1. Traceroute: `tracert {ip_centrale or 'IP_CENTRALE'}`
            2. V√©rifier les ACLs: `show ip access-list`
            3. Contr√¥ler les firewalls interm√©diaires
            4. V√©rifier les routes: `show ip route`
            """)
    else:
        # Test latence
        latence_ok = st.radio(
            "La latence ping est-elle correcte (<10ms en LAN, <50ms en WAN) ?",
            ["Oui", "Non"],
            key="q_latence"
        )
        
        if latence_ok == "Non":
            st.warning("‚ö†Ô∏è Latence √©lev√©e d√©tect√©e")
            
            pertes = st.radio(
                "Y a-t-il des pertes de paquets dans le ping ?",
                ["Oui", "Non"],
                key="q_pertes"
            )
            
            if pertes == "Oui":
                st.error("Pertes de paquets - V√©rifier la charge r√©seau et les erreurs d'interface")
    
    # Navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente", use_container_width=True):
            st.session_state.etape_actuelle = 3
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è √âtape suivante : Port CI", use_container_width=True):
            st.session_state.etape_actuelle = 5
            st.rerun()

def etape_port_ci():
    """√âtape 5: Port CI 24005."""
    st.header("5Ô∏è‚É£ Port CI 24005 - Service et Connexion TCP")
    
    st.warning("‚ö†Ô∏è **TESTS DEPUIS LA CENTRALE UNIQUEMENT** - Le moniteur ne permet pas l'ex√©cution de commandes")
    
    with st.expander("üîç Commandes de test (depuis la centrale)", expanded=False):
        st.code("""
# V√©rifier √©coute du service
netstat -an | grep 24005
ss -tlnp | grep 24005

# Test local
telnet localhost 24005

# PowerShell
Get-NetTCPConnection -LocalPort 24005
        """, language="bash")
    
    # Service √©coute
    service_ecoute = st.radio(
        "Le service CI √©coute-t-il sur le port 24005 sur la centrale ?",
        ["Oui", "Non"],
        key="q_service_ecoute"
    )
    
    if service_ecoute == "Non":
        st.error("‚ö†Ô∏è **SERVICE CI NON ACTIF**")
        with st.expander("üìù Actions correctives urgentes"):
            st.markdown("""
            1. V√©rifier service: `systemctl status <service_ci>`
            2. Contr√¥ler config port dans fichier conf
            3. Examiner logs: `journalctl -u <service>`
            4. Red√©marrer si n√©cessaire
            5. V√©rifier bind address (0.0.0.0 vs IP sp√©cifique)
            """)
    else:
        # Analyse Wireshark
        st.subheader("üî¨ Analyse Wireshark")
        
        with st.expander("Filtres Wireshark recommand√©s"):
            st.code("""
# Filtre de base
tcp.port == 24005

# Handshake TCP
tcp.port == 24005 and (tcp.flags.syn == 1 or tcp.flags.reset == 1)

# Connexions refus√©es
tcp.port == 24005 and tcp.flags.reset == 1

# Retransmissions
tcp.analysis.retransmission
            """)
        
        tentatives = st.radio(
            "Une capture Wireshark montre-t-elle des tentatives de connexion du moniteur ?",
            ["Oui", "Non"],
            key="q_tentatives_wireshark"
        )
        
        if tentatives == "Non":
            st.error("‚ö†Ô∏è Moniteur ne tente pas de connexion")
            st.markdown("""
            **Causes possibles:**
            - Moniteur hors tension
            - Probl√®me r√©seau en amont
            - Configuration moniteur incorrecte
            - IP centrale mal configur√©e
            """)
        else:
            handshake_ok = st.radio(
                "Le handshake TCP s'√©tablit-il correctement (SYN ‚Üí SYN-ACK ‚Üí ACK) ?",
                ["Oui", "Non"],
                key="q_handshake"
            )
            
            if handshake_ok == "Non":
                rst_packets = st.radio(
                    "Y a-t-il des paquets TCP RST (reset) ?",
                    ["Oui", "Non"],
                    key="q_rst"
                )
                
                if rst_packets == "Oui":
                    st.error("Connexion activement refus√©e - V√©rifier firewall/ACL")
                else:
                    st.error("Pas de SYN-ACK - Le paquet SYN n'arrive pas ou pas de r√©ponse")
            else:
                comm_app = st.radio(
                    "La communication applicative s'√©tablit-elle apr√®s le TCP ?",
                    ["Oui", "Non"],
                    key="q_comm_app"
                )
                
                if comm_app == "Non":
                    st.warning("Probl√®me couche applicative - V√©rifier authentification")
    
    # Navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente", use_container_width=True):
            st.session_state.etape_actuelle = 4
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è √âtape suivante : Couche Applicative", use_container_width=True):
            st.session_state.etape_actuelle = 6
            st.rerun()

def etape_applicative():
    """√âtape 6: Couche Applicative."""
    st.header("6Ô∏è‚É£ Couche Applicative - Service CI")
    
    with st.expander("üîç Commandes de v√©rification service", expanded=False):
        st.code("""
# √âtat du service
systemctl status <service_ci>
journalctl -u <service_ci> -f

# Processus
ps aux | grep ci

# Ports √©cout√©s
netstat -tlnp | grep 24005

# Ressources
top
df -h
        """, language="bash")
    
    service_repond = st.radio(
        "Le service CI r√©pond-il aux requ√™tes applicatives ?",
        ["Oui", "Non"],
        key="q_service_repond"
    )
    
    if service_repond == "Non":
        st.error("‚ö†Ô∏è **PROBL√àME APPLICATIF D√âTECT√â**")
        
        logs_erreur = st.radio(
            "Y a-t-il des erreurs dans les logs de l'application CI ?",
            ["Oui", "Non"],
            key="q_logs_erreur"
        )
        
        if logs_erreur == "Oui":
            type_erreur = st.text_input("Type d'erreur observ√© dans les logs", key="type_erreur")
            if type_erreur:
                st.session_state.donnees_collectees['Type erreur'] = type_erreur
        
        ressources_ok = st.radio(
            "Les ressources syst√®me sont-elles suffisantes (CPU < 80%, RAM libre) ?",
            ["Oui", "Non"],
            key="q_ressources"
        )
        
        if ressources_ok == "Non":
            st.error("‚ö†Ô∏è Ressources syst√®me insuffisantes")
    
    # Navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente", use_container_width=True):
            st.session_state.etape_actuelle = 5
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è √âtape suivante : Trafic Multicast", use_container_width=True):
            st.session_state.etape_actuelle = 7
            st.rerun()

def etape_multicast():
    """√âtape 7: Trafic Multicast."""
    st.header("7Ô∏è‚É£ Trafic Multicast - D√©couverte Automatique")
    
    st.info("Le multicast est souvent utilis√© pour la d√©couverte automatique des moniteurs")
    
    with st.expander("üî¨ Filtres Wireshark Multicast", expanded=False):
        st.code("""
# Multicast g√©n√©ral
ip.dst >= 224.0.0.0 and ip.dst <= 239.255.255.255

# IGMP
igmp

# D√©couverte CI
udp and ip.dst >= 224.0.0.0
        """)
    
    with st.expander("üîç Commandes r√©seau multicast", expanded=False):
        st.code("""
# IGMP Snooping
show ip igmp snooping
show ip igmp snooping groups

# IGMP Querier
show ip igmp snooping querier

# Table multicast
show mac address-table multicast

# PIM (si routage)
show ip pim neighbor
show ip mroute
        """, language="bash")
    
    multicast_visible = st.radio(
        "Du trafic multicast est-il visible en Wireshark ?",
        ["Oui", "Non"],
        key="q_multicast_visible"
    )
    
    if multicast_visible == "Non":
        st.error("‚ö†Ô∏è **PROBL√àME MULTICAST**")
        
        igmp_snooping = st.radio(
            "IGMP Snooping est-il activ√© sur les switches ?",
            ["Oui", "Non"],
            key="q_igmp_snooping"
        )
        
        if igmp_snooping == "Oui":
            querier_ok = st.radio(
                "Un IGMP Querier est-il pr√©sent et actif ?",
                ["Oui", "Non"],
                key="q_querier"
            )
            
            if querier_ok == "Non":
                st.error("‚ö†Ô∏è Configurer un Querier IGMP")
    else:
        groupes = st.text_input("Groupes multicast observ√©s (ex: 224.1.1.1)", key="groupes_multicast")
        if groupes:
            st.session_state.donnees_collectees['Groupes multicast'] = groupes
        
        contenu_ok = st.radio(
            "Le contenu des paquets multicast semble-t-il correct ?",
            ["Oui", "Non"],
            key="q_contenu_multicast"
        )
    
    # Navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente", use_container_width=True):
            st.session_state.etape_actuelle = 6
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è √âtape suivante : QoS", use_container_width=True):
            st.session_state.etape_actuelle = 8
            st.rerun()

def etape_qos():
    """√âtape 8: QoS."""
    st.header("8Ô∏è‚É£ QoS et Priorisation - Qualit√© de Service")
    
    with st.expander("üîç Commandes QoS", expanded=False):
        st.code("""
# Configuration QoS
show policy-map
show class-map

# Par interface
show policy-map interface <int>

# Statistiques
show policy-map interface <int> statistics
show interface <int> | include drops

# Utilisation
show interface | include load
        """, language="bash")
    
    with st.expander("üî¨ Filtres Wireshark QoS", expanded=False):
        st.code("""
# Marquage DSCP
ip.dsfield.dscp != 0

# Trafic prioritaire
ip.dsfield.dscp >= 32

# Congestion
tcp.analysis.window_full
        """)
    
    qos_active = st.radio(
        "Des politiques QoS sont-elles configur√©es sur le r√©seau ?",
        ["Oui", "Non"],
        key="q_qos_active"
    )
    
    if qos_active == "Oui":
        dscp_ok = st.radio(
            "Le marquage DSCP est-il correct sur les paquets CI ?",
            ["Oui", "Non"],
            key="q_dscp"
        )
        
        if dscp_ok == "Non":
            st.warning("‚ö†Ô∏è Probl√®me de marquage QoS")
        
        congestion = st.radio(
            "Y a-t-il des signes de congestion r√©seau ?",
            ["Oui", "Non"],
            key="q_congestion"
        )
        
        if congestion == "Oui":
            st.error("‚ö†Ô∏è Congestion d√©tect√©e")
            
            perf_ci = st.radio(
                "Les performances du CI sont-elles d√©grad√©es pendant les pics ?",
                ["Oui", "Non"],
                key="q_perf_ci"
            )
    else:
        problemes_perf = st.radio(
            "Y a-t-il des probl√®mes de performance ou de latence ?",
            ["Oui", "Non"],
            key="q_problemes_perf"
        )
        
        if problemes_perf == "Oui":
            st.warning("üí° Consid√©rer l'impl√©mentation de la QoS pour le trafic CI")
    
    # Navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente", use_container_width=True):
            st.session_state.etape_actuelle = 7
            st.rerun()
    with col2:
        if st.button("‚úÖ Voir la synth√®se", use_container_width=True):
            st.session_state.etape_actuelle = 9
            st.rerun()

def afficher_synthese():
    """Affiche la synth√®se du diagnostic."""
    st.header("üìä Synth√®se du Diagnostic")
    
    st.success("Diagnostic termin√© - Voici le r√©capitulatif")
    
    # Donn√©es collect√©es
    if st.session_state.donnees_collectees:
        st.subheader("üìã Informations collect√©es")
        
        col1, col2 = st.columns(2)
        items = list(st.session_state.donnees_collectees.items())
        mid = len(items) // 2
        
        with col1:
            for cle, valeur in items[:mid]:
                st.metric(cle, valeur)
        
        with col2:
            for cle, valeur in items[mid:]:
                st.metric(cle, valeur)
    
    # Points cl√©s Wireshark
    st.subheader("üî¨ Points cl√©s pour l'analyse Wireshark")
    st.markdown("""
    - **Interface √† surveiller**: Celle connect√©e au segment du moniteur
    - **Filtre de base**: `tcp.port == 24005`
    - **Dur√©e recommand√©e**: 5-10 minutes pendant un test
    - **S√©quence √† v√©rifier**: SYN ‚Üí SYN-ACK ‚Üí ACK puis √©changes applicatifs
    """)
    
    # Recommandations
    st.subheader("üéØ Recommandations")
    st.info("""
    1. Sauvegarder ce diagnostic pour r√©f√©rence future
    2. Documenter les corrections appliqu√©es
    3. Tester la solution apr√®s chaque modification
    4. Surveiller la stabilit√© sur 24-48h
    """)
    
    # Export
    st.subheader("üíæ Export du rapport")
    if st.button("üì• T√©l√©charger le rapport JSON", use_container_width=True):
        exporter_rapport()

def exporter_rapport():
    """Exporte le rapport de diagnostic en JSON."""
    rapport = {
        "diagnostic_ci": {
            "port": 24005,
            "timestamp": datetime.now().isoformat(),
            "donnees_collectees": st.session_state.donnees_collectees,
            "etape_finale": st.session_state.etape_actuelle
        }
    }
    
    json_str = json.dumps(rapport, indent=2, ensure_ascii=False)
    
    st.download_button(
        label="üì• T√©l√©charger le rapport",
        data=json_str,
        file_name=f"diagnostic_ci_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        mime="application/json"
    )

def main():
    """Fonction principale de l'application."""
    initialiser_session()
    afficher_entete()
    afficher_sidebar()
    
    # Routage des √©tapes
    etapes_fonctions = {
        0: etape_configuration_initiale,
        1: etape_lldp,
        2: etape_physique,
        3: etape_ip,
        4: etape_connectivite,
        5: etape_port_ci,
        6: etape_applicative,
        7: etape_multicast,
        8: etape_qos,
        9: afficher_synthese
    }
    
    # Affichage de l'√©tape actuelle
    etape_fonction = etapes_fonctions.get(st.session_state.etape_actuelle, afficher_synthese)
    etape_fonction()
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        üîß Guide de Diagnostic R√©seau CI - Version 1.0.0
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
